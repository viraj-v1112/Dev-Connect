{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from '../actions/types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert';\nimport { URL } from '../URL';\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(URL + '/api/auth/');\n    console.log(res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const newUser = {\n    name,\n    email,\n    password\n  };\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify(newUser);\n\n  try {\n    const res = await axios.post(URL + '/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const newUser = {\n    email,\n    password\n  };\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify(newUser);\n\n  try {\n    const res = await axios.post(URL + '/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    // console.log(error);\n    const errors = error.response;\n\n    if (errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/DARSHIL/Desktop/DevConnect/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","setAlert","URL","loadUser","dispatch","localStorage","token","res","get","console","log","data","type","payload","error","register","name","email","password","newUser","config","headers","body","JSON","stringify","post","errors","response","forEach","err","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n} from '../actions/types';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport { setAlert } from './alert';\r\nimport { URL } from '../URL';\r\n\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n\r\n  try {\r\n    const res = await axios.get(URL + '/api/auth/');\r\n    console.log(res.data);\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => async (dispatch) => {\r\n  const newUser = { name, email, password };\r\n\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify(newUser);\r\n\r\n  try {\r\n    const res = await axios.post(URL + '/api/users', body, config);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (error) {\r\n    const errors = error.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((err) => dispatch(setAlert(err.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const newUser = { email, password };\r\n\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify(newUser);\r\n\r\n  try {\r\n    const res = await axios.post(URL + '/api/auth', body, config);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (error) {\r\n    // console.log(error);\r\n    const errors = error.response;\r\n\r\n    if (errors) {\r\n      errors.forEach((err) => dispatch(setAlert(err.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}